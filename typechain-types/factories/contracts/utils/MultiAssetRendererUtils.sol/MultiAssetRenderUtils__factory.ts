/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  MultiAssetRenderUtils,
  MultiAssetRenderUtilsInterface,
} from "../../../../contracts/utils/MultiAssetRendererUtils.sol/MultiAssetRenderUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getActiveAssets",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "id",
            type: "uint64",
          },
          {
            internalType: "uint16",
            name: "priority",
            type: "uint16",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
        ],
        internalType: "struct MultiAssetRenderUtils.ActiveAsset[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint64[]",
        name: "assetIds",
        type: "uint64[]",
      },
    ],
    name: "getAssetsById",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getPendingAssets",
    outputs: [
      {
        components: [
          {
            internalType: "uint64",
            name: "id",
            type: "uint64",
          },
          {
            internalType: "uint128",
            name: "acceptRejectIndex",
            type: "uint128",
          },
          {
            internalType: "uint64",
            name: "overwritesAssetWithId",
            type: "uint64",
          },
          {
            internalType: "string",
            name: "metadata",
            type: "string",
          },
        ],
        internalType: "struct MultiAssetRenderUtils.PendingAsset[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getTopAssetMetaForToken",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610f74806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806316fbb1891461005157806323d7dfcb1461007a57806341e78cb91461009a57806373d36d7d146100ba575b600080fd5b61006461005f3660046109de565b6100da565b6040516100719190610a64565b60405180910390f35b61008d6100883660046109de565b6103be565b6040516100719190610af6565b6100ad6100a8366004610b74565b610670565b6040516100719190610bfd565b6100cd6100c83660046109de565b6107a9565b6040516100719190610c5f565b6040516328a9972d60e11b81526004810182905260609083906000906001600160a01b038316906351532e5a90602401600060405180830381865afa158015610127573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261014f9190810190610cfa565b8051909150600081900361017e5760405162461bcd60e51b815260040161017590610d98565b60405180910390fd5b6000816001600160401b0381111561019857610198610c79565b6040519080825280602002602001820160405280156101e957816020015b60408051608081018252600080825260208083018290529282015260608082015282526000199092019101816101b65790505b50905060606000805b848110156103b057866001600160a01b0316635e2e32928a88848151811061021c5761021c610dc5565b60200260200101516040518363ffffffff1660e01b81526004016102539291909182526001600160401b0316602082015260400190565b600060405180830381865afa158015610270573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102989190810190610ddb565b9250866001600160a01b031663df6f556b8a8884815181106102bc576102bc610dc5565b60200260200101516040518363ffffffff1660e01b81526004016102f39291909182526001600160401b0316602082015260400190565b602060405180830381865afa158015610310573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103349190610e6e565b9150604051806080016040528087838151811061035357610353610dc5565b60200260200101516001600160401b03168152602001826001600160801b03168152602001836001600160401b031681526020018481525084828151811061039d5761039d610dc5565b60209081029190910101526001016101f2565b509198975050505050505050565b604051633940140f60e11b81526004810182905260609083906000906001600160a01b03831690637280281e90602401600060405180830381865afa15801561040b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104339190810190610cfa565b604051632f4a1aa560e11b8152600481018690529091506000906001600160a01b03841690635e94354a90602401600060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104a69190810190610e8b565b825190915060008190036104cc5760405162461bcd60e51b815260040161017590610d98565b6000816001600160401b038111156104e6576104e6610c79565b60405190808252806020026020018201604052801561053357816020015b604080516060808201835260008083526020830152918101919091528152602001906001900390816105045790505b509050606060005b8381101561066257866001600160a01b0316635e2e32928a88848151811061056557610565610dc5565b60200260200101516040518363ffffffff1660e01b815260040161059c9291909182526001600160401b0316602082015260400190565b600060405180830381865afa1580156105b9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105e19190810190610ddb565b9150604051806060016040528087838151811061060057610600610dc5565b60200260200101516001600160401b0316815260200186838151811061062857610628610dc5565b602002602001015161ffff1681526020018381525083828151811061064f5761064f610dc5565b602090810291909101015260010161053b565b509098975050505050505050565b606084826000816001600160401b0381111561068e5761068e610c79565b6040519080825280602002602001820160405280156106c157816020015b60608152602001906001900390816106ac5790505b50905060005b8281101561079d57836001600160a01b0316635e2e3292898989858181106106f1576106f1610dc5565b90506020020160208101906107069190610f21565b6040516001600160e01b031960e085901b16815260048101929092526001600160401b03166024820152604401600060405180830381865afa158015610750573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107789190810190610ddb565b82828151811061078a5761078a610dc5565b60209081029190910101526001016106c7565b50979650505050505050565b604051632f4a1aa560e11b81526004810182905260609083906000906001600160a01b03831690635e94354a90602401600060405180830381865afa1580156107f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261081e9190810190610e8b565b604051633940140f60e11b8152600481018690529091506000906001600160a01b03841690637280281e90602401600060405180830381865afa158015610869573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108919190810190610cfa565b825190915060008190036108b75760405162461bcd60e51b815260040161017590610d98565b61ffff6000805b83816001600160401b0316101561093857600086826001600160401b0316815181106108ec576108ec610dc5565b602002602001015190508361ffff168161ffff16101561092f5780935085826001600160401b03168151811061092457610924610dc5565b602002602001015192505b506001016108be565b50604051632f17194960e11b8152600481018990526001600160401b03821660248201526001600160a01b03871690635e2e329290604401600060405180830381865afa15801561098d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b59190810190610ddb565b9998505050505050505050565b80356001600160a01b03811681146109d957600080fd5b919050565b600080604083850312156109f157600080fd5b6109fa836109c2565b946020939093013593505050565b60005b83811015610a23578181015183820152602001610a0b565b83811115610a32576000848401525b50505050565b60008151808452610a50816020860160208601610a08565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561066257888303603f19018552815180516001600160401b039081168552888201516001600160801b031689860152878201511687850152606090810151608091850182905290610ae281860183610a38565b968901969450505090860190600101610a8b565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b8381101561066257888303603f19018552815180516001600160401b031684528781015161ffff16888501528601516060878501819052610b6081860183610a38565b968901969450505090860190600101610b1d565b60008060008060608587031215610b8a57600080fd5b610b93856109c2565b93506020850135925060408501356001600160401b0380821115610bb657600080fd5b818701915087601f830112610bca57600080fd5b813581811115610bd957600080fd5b8860208260051b8501011115610bee57600080fd5b95989497505060200194505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610c5257603f19888603018452610c40858351610a38565b94509285019290850190600101610c24565b5092979650505050505050565b602081526000610c726020830184610a38565b9392505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610cb757610cb7610c79565b604052919050565b60006001600160401b03821115610cd857610cd8610c79565b5060051b60200190565b6001600160401b0381168114610cf757600080fd5b50565b60006020808385031215610d0d57600080fd5b82516001600160401b03811115610d2357600080fd5b8301601f81018513610d3457600080fd5b8051610d47610d4282610cbf565b610c8f565b81815260059190911b82018301908381019087831115610d6657600080fd5b928401925b82841015610d8d578351610d7e81610ce2565b82529284019290840190610d6b565b979650505050505050565b602080825260139082015272546f6b656e20686173206e6f2061737365747360681b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610ded57600080fd5b81516001600160401b0380821115610e0457600080fd5b818401915084601f830112610e1857600080fd5b815181811115610e2a57610e2a610c79565b610e3d601f8201601f1916602001610c8f565b9150808252856020828501011115610e5457600080fd5b610e65816020840160208601610a08565b50949350505050565b600060208284031215610e8057600080fd5b8151610c7281610ce2565b60006020808385031215610e9e57600080fd5b82516001600160401b03811115610eb457600080fd5b8301601f81018513610ec557600080fd5b8051610ed3610d4282610cbf565b81815260059190911b82018301908381019087831115610ef257600080fd5b928401925b82841015610d8d57835161ffff81168114610f125760008081fd5b82529284019290840190610ef7565b600060208284031215610f3357600080fd5b8135610c7281610ce256fea26469706673582212205d7f185729337c20ae89cbaa7bb2c8aa0205fa4d5c3886a6eb9b5ed9b189592f64736f6c634300080f0033";

type MultiAssetRenderUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MultiAssetRenderUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MultiAssetRenderUtils__factory extends ContractFactory {
  constructor(...args: MultiAssetRenderUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MultiAssetRenderUtils> {
    return super.deploy(overrides || {}) as Promise<MultiAssetRenderUtils>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MultiAssetRenderUtils {
    return super.attach(address) as MultiAssetRenderUtils;
  }
  override connect(signer: Signer): MultiAssetRenderUtils__factory {
    return super.connect(signer) as MultiAssetRenderUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MultiAssetRenderUtilsInterface {
    return new utils.Interface(_abi) as MultiAssetRenderUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MultiAssetRenderUtils {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MultiAssetRenderUtils;
  }
}
